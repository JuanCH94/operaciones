# -*- coding: utf-8 -*-
"""funciones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17oda-oVio-DwZegnAKhLnEjKXZI3sDml
"""

# funciones.py

import os
from PIL import Image 
from pathlib import Path
import numpy as np
                     

# --- Función para redimensionar y copiar ---
# Esta función toma un DataFrame con rutas de imágenes y etiquetas,
# el nombre del subconjunto (ej. 'train', 'val', 'test'),
# la ruta base donde se guardarán los resultados,
# y el tamaño al que se redimensionarán las imágenes.
def resize_and_copy(df_split, split_name, output_base, image_size):
    # Itera sobre cada fila del DataFrame (df_split)
    for _, row in df_split.iterrows():
        label = row['label']          # Obtiene la etiqueta de la imagen (ej. 'glioma')
        src = row['filepath']         # Obtiene la ruta de origen de la imagen

        # Construye la ruta de destino:
        # output_base/split_name/label/nombre_imagen.jpg
        # Ejemplo: /content/drive/MyDrive/operaciones/salidas/data_modelo/train/glioma/imagen_001.jpg
        dst_dir = os.path.join(output_base, split_name, label)
        # Crea el directorio de destino si no existe. exist_ok=True evita errores si ya existe.
        os.makedirs(dst_dir, exist_ok=True)
        # Construye la ruta completa del archivo de destino, manteniendo el nombre original de la imagen.
        dst_path = os.path.join(dst_dir, os.path.basename(src))

        try:
            # Abre la imagen desde la ruta de origen
            img = Image.open(src)
            # Asegura que la imagen tenga 3 canales (RGB) para consistencia.
            # Algunas imágenes podrían ser en escala de grises o tener canal alfa.
            img = img.convert('RGB')
            # Redimensiona la imagen al tamaño especificado (ancho, alto).
            img = img.resize(image_size)
            # Guarda la imagen redimensionada en la ruta de destino.
            img.save(dst_path)
        except Exception as e:
            # Captura cualquier error que ocurra durante el procesamiento de una imagen
            # e imprime un mensaje de error sin detener el proceso completo.
            print(f"Error al procesar {src}: {e}")


def cargar_imagenes_en_array(path):
    x_data = []
    y_data = []
    file_list = []

    path = Path(path)
    clases = sorted([carpeta.name for carpeta in path.iterdir() if carpeta.is_dir()])
    clase_a_indice = {clase: idx for idx, clase in enumerate(clases)}

    for clase in clases:
        carpeta = path / clase
        for imagen_path in carpeta.glob('*.*'):
            try:
                img = Image.open(imagen_path).convert('RGB')
                arr = np.array(img)
                x_data.append(arr)
                y_data.append(clase_a_indice[clase])
                file_list.append(imagen_path.name)
            except Exception as e:
                print(f"Error con la imagen: {imagen_path} | {e}")

    return np.array(x_data), np.array(y_data), file_list